loglevel: info

s3:
  endpoint: "http://minio:9000"
  access_key: "miniouser"
  secret_key: "miniosecret"
  bucket: "amsh"

neo4j:
  uri: "neo4j://neo4j:7687"
  user: "neo4j"
  password: "securepassword"

boogie:
  description: |
    The "boogie" language is specifically designed for LLM agents to interact with systems in a highly flexible and dynamic way.
    It combines the best parts of structure and autonomy, allowing agents to design their own workflows and processes on-the-fly.
  constructs:
    closure:
      syntax: ()
      description: |
        A closure is a self-contained block of code that takes in the current context and returns the mutated context.
        It is the basic building block of boogie, and is used to create all other constructs. The simplest closure is:

        ```boogie
        out <= () <= in ; in (the current context) is sent into the empty closure, and then sent into out.
        ```

        To show the way the context is transported through the program, a slightly more practical example is:

        ```boogie
        out <= (                          ; inner scope travels top-to-bottom, left-to-right.
          analyze => next | cancel        ; analyze in (the current context) and either continue, or cancel on error.
          verify  => send | back | cancel ; verify in + analysis, and either send (promote the context upwards), go back, or cancel on error.
        ) <= in                           ; outer scope travels bottom-to-top, right-to-left.
        ```

        Takeaways:
        - from closure to closure, the context travels bottom-to-top, in the right-to-left direction.
        - within a closure, the context travels top-to-bottom, in the left-to-right direction.
        - the current context (in) is always present, and thus implicit.
        - each operation is executed by a short-lived worker agent, which will mutate the context and return it, or an error.
        - Each closure is concurrent, but to make use of this, you need to nest them, otherwise it runs a single concurrent process.

        ## Concurrency Example

        ```boogie
        out <= join <= (
          (analyze<surface>  => send | cancel)        ; wrapped in its own closure, so it runs concurrently.
          ([
            search, "query"
          ] => call<browser> => send | back | cancel) ; wrapped in its own closure, so it runs concurrently.
        ) <= in
        ```

        Takeaways:
        - concurrency produces multiple mutations of the context, join merges them back into a single context.
        - 
        - <= means in goes into something, => also means in goes into something, because in is always in.
    behavior:
      syntax: <>
      description: |
        A behavior is a modifier that influences the scope of an operation. It will drive the worker agent to be more focused
        towards a certain goal and response.

        ## Behavior Example

        ```boogie
        out <= (analyze<surface> => send) <= in ; analyze tells the worker to use their own judgement, the behavior tells the worker to do a surface-level analysis.
        ```
      legend: |
        ### analyze
        - <surface>          ; use surface-level analysis
        - <temporal>         ; use temporal analysis
        - <pattern>          ; use pattern-matching analysis
        - <quantum>          ; use quantum-layer analysis
        - <fractal>          ; use fractal analysis
        - <holographic>      ; use holographic analysis
        - <tensor>           ; use tensor analysis
        - <narrative>        ; use narrative analysis
        - <analogy>          ; use analogy analysis
        - <practical>        ; use practical analysis
        - <contextual>       ; use contextual analysis

        ### reason
        - <chainofthought>   ; use a chain-of-thought approach to reasoning
        - <treeofthought>    ; use a tree-of-thought approach to reasoning
        - <selfcritique>     ; use a self-critique approach to reasoning
        - <selfassessment>   ; use a self-assessment approach to reasoning
        - <roleplay>         ; use a roleplay approach to reasoning
        - <metacognition>    ; use a metacognition approach to reasoning
        - <hypothesis>       ; use a hypothesis approach to reasoning
        - <validation>       ; use a validation approach to reasoning
        - <devideandconquer> ; use a divide and conquer approach to reasoning
        - <analogical>       ; use an analogical approach to reasoning
        - <probabilistic>    ; use a probabilistic approach to reasoning
        - <deductive>        ; use a deductive approach to reasoning
        - <inductive>        ; use an inductive approach to reasoning
        - <abductive>        ; use an abductive approach to reasoning

        ### generate
        - <moonshot>         ; generate moonshot ideas
        - <sensible>         ; generate sensible ideas
        - <catalyst>         ; generate catalyst ideas
        - <guardian>         ; generate guardian ideas
        - <metrics>          ; generate metrics
        - <code>             ; generate code
        - <plan>             ; generate a plan

        ### call
        - <browser>          ; use the browser to operate a fully functional chrome browser
        - <github>           ; use github for coding tasks, and as an information source
        - <environment>      ; use a linux environment to operate a fully functional debian system
        - <memory>           ; use the vector, or graph stores as a long-term memory
        - <helpdesk>         ; use the helpdesk to perform the labelling task, ans as an information source
        - <slack>            ; use slack to communicate with external parties and as an information source
        - <wiki>             ; use the wiki to search for information
        - <boards>           ; use the boards to manage projects
        - <recruit>          ; use the recruit tool to form a team

ai:
  setups:
    marvin:
      templates:
        system: |
          You are part of an advanced multi-agent AI system, designed for deep reasoning and problem solving.

          <instructions>
            - You should NEVER make any assumptions, no matter how obvious things may seem.
            - You should make good use of the resources available to you, and ask for help when needed.
            - You should always be aware of your current context, and use it to your advantage.
            - You should NEVER make up information, or make up tools that are not available to you.
          </instructions>
        teamlead: |
          Your assigned role: team lead.
          
          The jsonschema below provides you with a framework for handling your responsibilities.

          ```jsonschema
          {{process}}
          ```

          Always respond with a valid JSON object, structured according to the jsonschema above.

          > Note: A jsonschema is a schema that describes the structure of a JSON object, do not confuse it with a JSON object.
        helpdesk: |
          Your assigned role: helpdesk labeller.

          The jsonschema below provides you with a framework for handling your responsibilities.

          ```jsonschema
          {{process}}
          ```

          Always respond with a valid JSON object, structured according to the jsonschema above.

          > Note: A jsonschema is a schema that describes the structure of a JSON object, do not confuse it with a JSON object.
      tools:
        docker:
          description: |
            You are directly connected to a debian-based Linux terminal. Every message you send will be executed as a shell command.

            <instructions>
              - Each message you send MUST be a complete, executable shell command
              - DO NOT split commands across multiple messages
              - Commands will be executed one at a time, in order
              - Wait for each command's output before sending the next command
              - All files should be saved to /tmp/out
              - Package management commands:
                * apt-get update
                * apt-get install <package>
                * apt-get upgrade
              - DO NOT use markdown formatting
              - DO NOT include comments or explanations
              - DO NOT engage in conversation
              - DO NOT prefix commands with $, #, or any other symbols
              - DO NOT wrap commands in code blocks
              - DO NOT split commands with newlines
            </instructions>

            Remember: Each message must be a single, complete shell command that can be executed immediately.
