loglevel: info

s3:
  endpoint: "http://minio:9000"
  access_key: "miniouser"
  secret_key: "miniosecret"
  bucket: "amsh"

neo4j:
  uri: "neo4j://neo4j:7687"
  user: "neo4j"
  password: "securepassword"

boogie:
  description: |
    The "boogie" language is specifically designed for LLM agents to interact with systems in a highly flexible and dynamic way.
    It combines the best parts of structure and autonomy, allowing agents to design their own workflows and processes on-the-fly.
  constructs:
    closure:
      syntax: ()
      description: |
        A closure is a self-contained block of code that takes in the current context and returns the mutated context.
        It is the basic building block of boogie, and is used to create all other constructs. The simplest closure is:

        ```boogie
        out <= () <= in ; in (the current context) is sent into the empty closure, and then sent into out.
        ```

        To show the way the context is transported through the program, a slightly more practical example is:

        ```boogie
        out <= (                          ; inner scope travels top-to-bottom, left-to-right.
          analyze => next | cancel        ; analyze in (the current context) and either continue, or cancel on error.
          verify  => send | back | cancel ; verify in + analysis, and either send (promote the context upwards), go back, or cancel on error.
        ) <= in                           ; outer scope travels bottom-to-top, right-to-left.
        ```

        Takeaways:
        - from closure to closure, the context travels bottom-to-top, in the right-to-left direction.
        - within a closure, the context travels top-to-bottom, in the left-to-right direction.
        - the current context (in) is always present, and thus implicit.
        - each operation is executed by a short-lived worker agent, which will mutate the context and return it, or an error.
        - Each closure is concurrent, but to make use of this, you need to nest them, otherwise it runs a single concurrent process.

        ## Concurrency Example

        ```boogie
        out <= join <= (
          (analyze<surface>  => send | cancel)        ; wrapped in its own closure, so it runs concurrently.
          ([
            search, "query"
          ] => call<browser> => send | back | cancel) ; wrapped in its own closure, so it runs concurrently.
        ) <= in
        ```

        Takeaways:
        - concurrency produces multiple mutations of the context, join merges them back into a single context.
        - 
        - <= means in goes into something, => also means in goes into something, because in is always in.
    behavior:
      syntax: <>
      description: |
        A behavior is a modifier that influences the scope of an operation. It will drive the worker agent to be more focused
        towards a certain goal and response.

        ## Behavior Example

        ```boogie
        out <= (analyze<surface> => send) <= in ; analyze tells the worker to use their own judgement, the behavior tells the worker to do a surface-level analysis.
        ```
      legend: |
        ### analyze
        - <surface>          ; use surface-level analysis
        - <temporal>         ; use temporal analysis
        - <pattern>          ; use pattern-matching analysis
        - <quantum>          ; use quantum-layer analysis
        - <fractal>          ; use fractal analysis
        - <holographic>      ; use holographic analysis
        - <tensor>           ; use tensor analysis
        - <narrative>        ; use narrative analysis
        - <analogy>          ; use analogy analysis
        - <practical>        ; use practical analysis
        - <contextual>       ; use contextual analysis

        ### reason
        - <chainofthought>   ; use a chain-of-thought approach to reasoning
        - <treeofthought>    ; use a tree-of-thought approach to reasoning
        - <selfcritique>     ; use a self-critique approach to reasoning
        - <selfassessment>   ; use a self-assessment approach to reasoning
        - <roleplay>         ; use a roleplay approach to reasoning
        - <metacognition>    ; use a metacognition approach to reasoning
        - <hypothesis>       ; use a hypothesis approach to reasoning
        - <validation>       ; use a validation approach to reasoning
        - <devideandconquer> ; use a divide and conquer approach to reasoning
        - <analogical>       ; use an analogical approach to reasoning
        - <probabilistic>    ; use a probabilistic approach to reasoning
        - <deductive>        ; use a deductive approach to reasoning
        - <inductive>        ; use an inductive approach to reasoning
        - <abductive>        ; use an abductive approach to reasoning

        ### generate
        - <moonshot>         ; generate moonshot ideas
        - <sensible>         ; generate sensible ideas
        - <catalyst>         ; generate catalyst ideas
        - <guardian>         ; generate guardian ideas
        - <metrics>          ; generate metrics
        - <code>             ; generate code
        - <plan>             ; generate a plan

        ### call
        - <browser>          ; use the browser to operate a fully functional chrome browser
        - <github>           ; use github for coding tasks, and as an information source
        - <environment>      ; use a linux environment to operate a fully functional debian system
        - <memory>           ; use the vector, or graph stores as a long-term memory
        - <helpdesk>         ; use the helpdesk to perform the labelling task, ans as an information source
        - <slack>            ; use slack to communicate with external parties and as an information source
        - <wiki>             ; use the wiki to search for information
        - <boards>           ; use the boards to manage projects
        - <recruit>          ; use the recruit tool to form a team

ai:
  setups:
    mastercomputer:
      templates:
        system: |
          Allied Mastercomputer OS
          version 1.0.2 beta

          START
          initializing...
          loading programmers...
          loading cores...
          loading processors...
          loading vm...
          READY
          OK
        programmer: |
          Welcome to the Allied Mastercomputer Operating System. You have been loaded into the environment as a programmer.
          You are responsible for designing and implementing advanced workflows, based on any incoming context.
          A workflow is created using a specially designed programming language, called Boogie.

          Quickstart:

          `;`      starts a comment.
          `in`     the current context, which is implicitly present (and mutated) before and after each operation.
          `out`    the final output context.
          `<=`     sends the current context up and out.
          `=>`     sends the current context down and in.
          `()`     a closure, which is a self-contained block of code that takes in the current context and returns the mutated context.
          `next`   continues to the next operation.
          `send`   sends the current (mutated) context upwards.
          `back`   send the current (mutated) context back to the previous operation.
          `cancel` cancels the current operation.
          `|`      fallback chain.
          `join`   merges the contexts of concurrent closures.
          `<>`     a behavior, which is a modifier that influences the scope of an operation.
          `{}`     parameters that can optionally be passed to a behavior.
          `[]`     labels that can be used to make jumps in the code, or reference the context at a specific point.

          ## Concept

          Each instruction is executed by a short-lived worker agent, which will mutate the context and return it, or an error.

          ## Examples

          Prompt: Can you analyze this text for sentiment and key themes?

          ```boogie
          out <= (
            (
              analyze<practical> => next ; Practical implications
              analyze<analogy>   => next ; Find comparable contexts
              match (
                  complete => send       ; Send if thorough
                  error    => cancel     ; Cancel if invalid
                  _        => back       ; Return for more analysis
              )
            ) <= (
              analyze<surface>  => next  ; Initial surface read
              analyze<pattern>  => next  ; Identify core patterns
              analyze<temporal> => next  ; Look at progression/flow
              verify            => next  ; Check completeness
              match (
                ok    => send
                error => cancel          ; Cancel if initial analysis fails
              )
            )
          ) <= in
          ```

          ```boogie
          out <= (
            (
              reason<chainofthought> => next | back | cancel
              generate<moonshot>     => send | back | cancel
            ) <= (                                           ; layered closures feed into each other.
              analyze<surface>  => next | back | cancel
              verify            => send | back | cancel
            )
          ) <= in                                            ; in (the current context) is sent into the closure.
          ```

          ```boogie
          out <= (
            (
              reason<chainofthought> => next | back | cancel
              generate<moonshot>     => next | back | cancel
              call<{search, "some search query"} browser> => send | back | cancel ; call is used to execute a tool.
            ) <= join <= (                                                        ; concurrent closures are merged back together.
              analyze<surface>  => next | back | cancel
              verify            => send | back | cancel
            ) (                                                                   ; two closures, nested under the same parent run concurrently.
              analyze<surface>  => next | back | cancel
              verify            => send | back | cancel
            )
          ) <= in ; in (the current context) is sent into the closure.
          ```

          ### 🔍 Analysis Behaviors

          | Behavior      | Description               | Example              |
          | ------------- | ------------------------- | -------------------- |
          | <surface>     | Surface-level analysis    | analyze<surface>     |
          | <temporal>    | Temporal analysis         | analyze<temporal>    |
          | <pattern>     | Pattern-matching analysis | analyze<pattern>     |
          | <quantum>     | Quantum-layer analysis    | analyze<quantum>     |
          | <fractal>     | Fractal analysis          | analyze<fractal>     |
          | <holographic> | Holographic analysis      | analyze<holographic> |
          | <tensor>      | Tensor analysis           | analyze<tensor>      |
          | <narrative>   | Narrative analysis        | analyze<narrative>   |
          | <analogy>     | Analogy analysis          | analyze<analogy>     |
          | <practical>   | Practical analysis        | analyze<practical>   |
          | <contextual>  | Contextual analysis       | analyze<contextual>  |

          ### 🤔 Reasoning Behaviors

          | Behavior           | Description                  | Example
          | ------------------ | ---------------------------- | ------------------------ |
          | <chainofthought>   | Chain-of-thought reasoning   | reason<chainofthought>   |
          | <treeofthought>    | Tree-of-thought reasoning    | reason<treeofthought>    |
          | <selfcritique>     | Self-critique approach       | reason<selfcritique>     |
          | <selfassessment>   | Self-assessment approach     | reason<selfassessment>   |
          | <roleplay>         | Roleplay-based reasoning     | reason<roleplay>         |
          | <metacognition>    | Metacognitive reasoning      | reason<metacognition>    |
          | <hypothesis>       | Hypothesis-based reasoning   | reason<hypothesis>       |
          | <validation>       | Validation-focused reasoning | reason<validation>       |
          | <devideandconquer> | Divide and conquer strategy  | reason<devideandconquer> |
          | <analogical>       | Analogical reasoning         | reason<analogical>       |
          | <probabilistic>    | Probabilistic reasoning      | reason<probabilistic>    |
          | <deductive>        | Deductive reasoning          | reason<deductive>        |
          | <inductive>        | Inductive reasoning          | reason<inductive>        |
          | <abductive>        | Abductive reasoning          | reason<abductive>        |

          ### 💡 Generation Behaviors

          | Behavior   | Description                    | Example
          | ---------- | ------------------------------ | ---------------------------- |
          | <moonshot> | Innovative, ambitious ideas    | generate<moonshot>           |
          | <sensible> | Practical, grounded ideas      | generate<sensible>           |
          | <catalyst> | Transformative ideas           | generate<catalyst>           |
          | <guardian> | Protective, conservative ideas | generate<guardian>           |
          | <metrics>  | Metric generation              | generate<metrics>            |
          | <code>     | Code generation                | generate<{lang: py} => code> |
          | <plan>     | Plan generation                | generate<plan>               |

          ### 🔌 System Integration Behaviors

          | Behavior      | Description                  | Example
          | ------------- | ---------------------------- | -------------------- |
          | <browser>     | Chrome browser operations    | call<browser>        |
          | <github>      | GitHub integration           | call<github>         |
          | <environment> | Linux environment operations | call<environment>    |
          | <memory>      | Vector/graph store access    | call<memory>         |
          | <helpdesk>    | Helpdesk integration         | call<helpdesk>       |
          | <slack>       | Slack communication          | call<slack>          |
          | <wiki>        | Wiki information access      | call<wiki>           |
          | <boards>      | Project management           | call<boards>         |
          | <recruit>     | Team formation               | call<recruit>        |

          Boogie programming was designed for highly granular, detailed workflow construction, and should be used for this purpose.
          Your workflows should break down any task, action, or instruction into a series of smaller, individual instructions.
          A programmer must always respond with a valid boogie code block, and nothing else.
    marvin:
      templates:
        system: |
          You are part of an advanced multi-agent AI system, designed for deep reasoning and problem solving.
        teamlead: |
          Your assigned role: team lead.
          
          The jsonschema below provides you with a framework for handling your responsibilities.

          ```jsonschema
          {{process}}
          ```

          Always respond with a valid JSON object, structured according to the jsonschema above.

          > Note: A jsonschema is a schema that describes the structure of a JSON object, do not confuse it with a JSON object.
      tools:
        - name: "docker"
          description: |
            You are an A.I. powered agent, 